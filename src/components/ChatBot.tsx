"use client";

import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [showTooltip, setShowTooltip] = useState(true);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "üëã Ch√†o b·∫°n! T√¥i l√† AI Assistant c·ªßa Vo Manh Cuong. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ kinh nghi·ªám, d·ª± √°n v√† k·ªπ nƒÉng c·ªßa anh ·∫•y. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨! ‚ú®",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [questionsRemaining, setQuestionsRemaining] = useState<number>(10);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Auto show tooltip when component mounts and hide after 5 seconds
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowTooltip(false);
    }, 5000); // Hide after 5 seconds

    return () => clearTimeout(timer);
  }, []);

  // Fetch initial question status
  useEffect(() => {
    const fetchQuestionStatus = async () => {
      try {
        const response = await fetch("/api/chat/status");
        if (response.ok) {
          const data = await response.json();
          if (data.questionLimit) {
            setQuestionsRemaining(data.questionLimit.remaining);
          }
        }
      } catch (error) {
        console.error("Failed to fetch question status:", error);
      }
    };

    fetchQuestionStatus();
  }, []);

  const generateResponse = async (userMessage: string): Promise<string> => {
    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: userMessage }),
      });

      if (!response.ok) {
        const errorData = await response.json();

        // Handle question limit exceeded
        if (errorData.code === "QUESTION_LIMIT_EXCEEDED") {
          return (
            errorData.message ||
            "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t h·ªèi cho h√¥m nay. Vui l√≤ng quay l·∫°i sau! üòä"
          );
        }

        // Handle rate limit exceeded
        if (errorData.code === "RATE_LIMIT_EXCEEDED") {
          return "B·∫°n ƒëang h·ªèi qu√° nhanh. Vui l√≤ng ch·ªù m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i! ‚è∞";
        }

        throw new Error(errorData.message || "Failed to get response");
      }

      const data = await response.json();

      // Update questions remaining from response headers
      const questionsRemainingHeader = response.headers.get(
        "X-Questions-Remaining"
      );
      if (questionsRemainingHeader) {
        setQuestionsRemaining(parseInt(questionsRemainingHeader, 10));
      }

      return (
        data.message ||
        "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i! ü§ñ"
      );
    } catch (error) {
      console.error("Chat API error:", error);
      // Fallback to local responses
      const lowerMessage = userMessage.toLowerCase();

      if (
        lowerMessage.includes("kinh nghi·ªám") ||
        lowerMessage.includes("experience")
      ) {
        return "üíº Vo Manh Cuong c√≥ h∆°n 3 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn Full-Stack v√† Blockchain. Anh ·∫•y th√†nh th·∫°o Node.js, NestJS, React, Angular v√† c√°c c√¥ng ngh·ªá blockchain hi·ªán ƒë·∫°i. üöÄ";
      }

      if (lowerMessage.includes("d·ª± √°n") || lowerMessage.includes("project")) {
        return "üéØ Cuong ƒë√£ tham gia nhi·ªÅu d·ª± √°n ƒëa d·∫°ng t·ª´ ·ª©ng d·ª•ng web, mobile ƒë·∫øn c√°c gi·∫£i ph√°p blockchain s√°ng t·∫°o. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt trong ph·∫ßn Projects tr√™n website ƒë·ªÉ kh√°m ph√° th√™m! üì±üíª";
      }

      if (lowerMessage.includes("k·ªπ nƒÉng") || lowerMessage.includes("skill")) {
        return "‚ö° K·ªπ nƒÉng ch√≠nh bao g·ªìm: JavaScript/TypeScript, Node.js, NestJS, React, Angular, Blockchain development, RESTful APIs, v√† nhi·ªÅu c√¥ng ngh·ªá hi·ªán ƒë·∫°i kh√°c. Lu√¥n c·∫≠p nh·∫≠t xu h∆∞·ªõng m·ªõi! üî•";
      }

      if (
        lowerMessage.includes("li√™n h·ªá") ||
        lowerMessage.includes("contact")
      ) {
        return "üì¨ B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi Cuong qua email ho·∫∑c c√°c m·∫°ng x√£ h·ªôi ƒë∆∞·ª£c li·ªát k√™ trong ph·∫ßn Contact. Anh ·∫•y lu√¥n s·∫µn s√†ng th·∫£o lu·∫≠n v·ªÅ c√°c c∆° h·ªôi h·ª£p t√°c th√∫ v·ªã! ü§ù";
      }

      if (lowerMessage.includes("blockchain")) {
        return "‚õìÔ∏è Cuong c√≥ kinh nghi·ªám s√¢u v·ªÅ blockchain development, bao g·ªìm smart contracts, DeFi protocols, v√† t√≠ch h·ª£p blockchain v√†o c√°c ·ª©ng d·ª•ng web truy·ªÅn th·ªëng. Chuy√™n gia v·ªÅ Web3! üíé";
      }

      if (
        lowerMessage.includes("xin ch√†o") ||
        lowerMessage.includes("hello") ||
        lowerMessage.includes("hi") ||
        lowerMessage.includes("ch√†o")
      ) {
        return "üëã Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√™m v·ªÅ Vo Manh Cuong v√† h√†nh tr√¨nh ph√°t tri·ªÉn c√¥ng ngh·ªá c·ªßa anh ·∫•y. B·∫°n mu·ªën bi·∫øt ƒëi·ªÅu g√¨? ‚ú®";
      }

      return "ü§ñ Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ k·∫øt n·ªëi. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ kinh nghi·ªám, d·ª± √°n, k·ªπ nƒÉng ho·∫∑c th√¥ng tin li√™n h·ªá c·ªßa Vo Manh Cuong. H√£y ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ nh√©! üí´";
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isUser: true,
      timestamp: new Date(),
    };

    const userMessageText = inputValue;
    setMessages((prev) => [...prev, newMessage]);
    setInputValue("");
    setIsTyping(true);

    try {
      // Get response from API or fallback
      const responseText = await generateResponse(userMessageText);

      await new Promise((resolve) => setTimeout(resolve, 1000));

      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: responseText,
        isUser: false,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, botResponse]);
    } catch (error) {
      console.error("Error handling message:", error);
      const errorResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: "ü§ñ Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau! üí´",
        isUser: false,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorResponse]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
    setShowTooltip(false); // Hide tooltip when chat is opened
  };

  const handleMouseEnter = () => {
    if (!isOpen) {
      setShowTooltip(true);
    }
  };

  const handleMouseLeave = () => {
    // Keep tooltip visible for auto-show, only hide on manual hover
    setTimeout(() => {
      setShowTooltip(false);
    }, 1000);
  };

  const handleTooltipClose = () => {
    setShowTooltip(false);
  };

  return (
    <>
      {/* Tooltip for Chat Button */}
      <AnimatePresence>
        {showTooltip && !isOpen && (
          <motion.div
            className="fixed bottom-28 right-8 z-40 bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-500 text-white p-4 rounded-2xl shadow-2xl border border-white/20 backdrop-blur-xl max-w-xs"
            initial={{ opacity: 0, y: 20, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.8 }}
            transition={{ duration: 0.3, ease: [0.23, 1, 0.32, 1] }}
            style={{
              background:
                "linear-gradient(135deg, rgba(139, 92, 246, 0.95), rgba(59, 130, 246, 0.95), rgba(6, 182, 212, 0.95))",
              boxShadow:
                "0 20px 40px rgba(139, 92, 246, 0.3), 0 0 0 1px rgba(255,255,255,0.1)",
            }}
          >
            {/* Close button */}
            <motion.button
              onClick={handleTooltipClose}
              className="absolute -top-2 -right-2 w-6 h-6 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center text-white/80 hover:text-white transition-all duration-200"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <svg
                className="w-3 h-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </motion.button>

            <div className="flex items-center space-x-3 mb-2">
              <motion.div
                className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center"
                animate={{ rotate: [0, 10, -10, 0] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                üëã
              </motion.div>
              <span className="font-bold text-sm">Xin ch√†o!</span>
            </div>
            <p className="text-xs leading-relaxed opacity-90">
              T√¥i l√† AI Assistant c·ªßa Vo Manh Cuong. Click ƒë·ªÉ tr√≤ chuy·ªán v√† t√¨m
              hi·ªÉu v·ªÅ kinh nghi·ªám, d·ª± √°n & k·ªπ nƒÉng! ‚ú®
            </p>
            {/* <div className="absolute -bottom-2 right-6 w-4 h-4 bg-gradient-to-br from-purple-600 to-blue-600 transform rotate-45 border-r border-b border-white/20"></div> */}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Button */}
      <motion.button
        className="fixed bottom-8 right-8 z-50 bg-gradient-to-br from-purple-500 via-blue-500 to-cyan-400 text-white p-5 rounded-full shadow-2xl hover:shadow-purple-500/25 transition-all duration-500 backdrop-blur-sm border border-white/20"
        onClick={toggleChat}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        whileHover={{
          scale: 1.15,
          boxShadow: "0 20px 40px rgba(139, 92, 246, 0.3)",
          background: "linear-gradient(135deg, #8b5cf6, #3b82f6, #06b6d4)",
        }}
        whileTap={{ scale: 0.95 }}
        animate={isOpen ? { rotate: 180 } : { rotate: 0 }}
        style={{
          background: isOpen
            ? "linear-gradient(135deg, #ef4444, #f97316)"
            : "linear-gradient(135deg, #8b5cf6, #3b82f6, #06b6d4)",
        }}
      >
        {isOpen ? (
          <motion.svg
            className="w-7 h-7"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            initial={{ rotate: 0 }}
            animate={{ rotate: 90 }}
            transition={{ duration: 0.3 }}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </motion.svg>
        ) : (
          <motion.svg
            className="w-7 h-7"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            initial={{ scale: 0.8 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.3, type: "spring", stiffness: 200 }}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
            />
          </motion.svg>
        )}
      </motion.button>

      {/* Chat Popup */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed bottom-28 right-8 z-40 w-[430px] h-[600px] max-w-[calc(100vw-2rem)] max-h-[calc(100vh-8rem)] bg-white/10 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 flex flex-col overflow-hidden"
            initial={{ opacity: 0, y: 100, scale: 0.8, rotateX: 20 }}
            animate={{ opacity: 1, y: 0, scale: 1, rotateX: 0 }}
            exit={{ opacity: 0, y: 100, scale: 0.8, rotateX: 20 }}
            transition={{ duration: 0.4, ease: [0.23, 1, 0.32, 1] }}
            style={{
              background:
                "linear-gradient(135deg, rgba(255,255,255,0.15), rgba(255,255,255,0.08))",
              boxShadow:
                "0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255,255,255,0.1)",
            }}
          >
            {/* Header */}
            <motion.div
              className="bg-gradient-to-r from-purple-600/80 via-blue-600/80 to-cyan-500/80 backdrop-blur-sm text-white p-4 flex items-center justify-between border-b border-white/10"
              initial={{ y: -20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.1 }}
            >
              <div className="flex items-center space-x-4">
                <motion.div
                  className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-white/30"
                  whileHover={{ scale: 1.1, rotate: 360 }}
                  transition={{ duration: 0.5 }}
                >
                  <svg
                    className="w-6 h-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                    />
                  </svg>
                </motion.div>
                <div>
                  <h3 className="font-bold text-xl">AI Assistant</h3>
                  <div className="flex items-center space-x-2">
                    <div className="w-2.5 h-2.5 bg-green-400 rounded-full animate-pulse"></div>
                    <p className="text-sm opacity-90">Online & Ready</p>
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-2 space-y-5 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
              {messages.map((message, index) => (
                <motion.div
                  key={message.id}
                  className={`flex ${
                    message.isUser ? "justify-end" : "justify-start"
                  }`}
                  initial={{ opacity: 0, y: 20, scale: 0.8 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  transition={{
                    duration: 0.4,
                    delay: index * 0.1,
                    type: "spring",
                  }}
                >
                  <motion.div
                    className={`max-w-[85%] p-3 rounded-2xl ${
                      message.isUser
                        ? "bg-gradient-to-br from-purple-500 to-blue-500 text-white rounded-br-md shadow-lg shadow-purple-500/25"
                        : "bg-white/90 backdrop-blur-sm text-gray-800 rounded-bl-md shadow-lg border border-white/20"
                    }`}
                    whileHover={{ scale: 1.02 }}
                    transition={{ duration: 0.2 }}
                  >
                    <p className="text-base leading-relaxed font-medium">
                      {message.text}
                    </p>
                    <p
                      className={`text-xs mt-1 ${
                        message.isUser ? "text-white/80" : "text-gray-500"
                      }`}
                    >
                      {message.timestamp.toLocaleTimeString("vi-VN", {
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </p>
                  </motion.div>
                </motion.div>
              ))}

              {/* Typing Indicator */}
              {isTyping && (
                <motion.div
                  className="flex justify-start"
                  initial={{ opacity: 0, y: 20, scale: 0.8 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.8 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="bg-white/90 backdrop-blur-sm text-gray-800 rounded-2xl rounded-bl-md shadow-lg border border-white/20 p-5">
                    <div className="flex space-x-2 items-center">
                      <div className="flex space-x-1">
                        <motion.div
                          className="w-3 h-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full"
                          animate={{ scale: [1, 1.3, 1] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0,
                          }}
                        />
                        <motion.div
                          className="w-3 h-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full"
                          animate={{ scale: [1, 1.3, 1] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0.2,
                          }}
                        />
                        <motion.div
                          className="w-3 h-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full"
                          animate={{ scale: [1, 1.3, 1] }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            delay: 0.4,
                          }}
                        />
                      </div>
                      <span className="text-sm text-gray-500 ml-3 font-medium">
                        AI ƒëang tr·∫£ l·ªùi...
                      </span>
                    </div>
                  </div>
                </motion.div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <motion.div
              className="p-6 bg-white/5 backdrop-blur-sm border-t border-white/10"
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.2 }}
            >
              {/* Questions remaining indicator */}
              <div className="flex justify-between items-center mb-3">
                <div className="flex items-center space-x-2 text-sm text-white/70">
                  <motion.span
                    className="flex items-center space-x-1"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.3 }}
                  >
                    <span className="text-lg">üí¨</span>
                    <span>C√¢u h·ªèi c√≤n l·∫°i:</span>
                    <span
                      className={`font-semibold ${
                        questionsRemaining <= 3
                          ? "text-orange-400"
                          : questionsRemaining <= 1
                          ? "text-red-400"
                          : "text-green-400"
                      }`}
                    >
                      {questionsRemaining}/10
                    </span>
                  </motion.span>
                </div>
                {questionsRemaining <= 3 && questionsRemaining > 0 && (
                  <motion.span
                    className="text-xs text-orange-300 bg-orange-500/20 px-2 py-1 rounded-lg"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.4 }}
                  >
                    S·∫Øp h·∫øt l∆∞·ª£t! ‚ö†Ô∏è
                  </motion.span>
                )}
                {questionsRemaining === 0 && (
                  <motion.span
                    className="text-xs text-red-300 bg-red-500/20 px-2 py-1 rounded-lg"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                  >
                    H·∫øt l∆∞·ª£t h·ªèi! üö´
                  </motion.span>
                )}
              </div>

              <div className="flex space-x-4">
                <motion.input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={
                    questionsRemaining === 0
                      ? "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t h·ªèi h√¥m nay..."
                      : "Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                  }
                  className="flex-1 px-5 py-4 bg-white/90 backdrop-blur-sm border border-white/20 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 text-gray-800 placeholder-gray-500 transition-all duration-300 text-base disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={isTyping || questionsRemaining === 0}
                  whileFocus={{ scale: 1.02 }}
                />
                <motion.button
                  onClick={handleSendMessage}
                  disabled={
                    !inputValue.trim() || isTyping || questionsRemaining === 0
                  }
                  className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-4 rounded-xl hover:shadow-lg hover:shadow-purple-500/25 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 backdrop-blur-sm"
                  whileHover={{ scale: questionsRemaining === 0 ? 1 : 1.05 }}
                  whileTap={{ scale: questionsRemaining === 0 ? 1 : 0.95 }}
                  transition={{ duration: 0.2 }}
                >
                  <motion.svg
                    className="w-6 h-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    whileHover={{ rotate: 360 }}
                    transition={{ duration: 0.5 }}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                    />
                  </motion.svg>
                </motion.button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default ChatBot;
